on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

name: AWS ECR push

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::100837159538:role/GithubActionsEcrRole
        aws-region: eu-north-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: 100837159538.dkr.ecr.eu-north-1.amazonaws.com/handleserver

    - name: Retrieve secret privkey
      id: retrieve-secret1
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id privkey --query SecretBinary --output text)
        echo $SECRET | base64 --decode > privkey.bin

    - name: Retrieve secret pubkey
      id: retrieve-secret2
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id pubkey --query SecretBinary --output text)
        echo $SECRET | base64 --decode > pubkey.bin

    - name: Retrieve secret admpriv
      id: retrieve-secret3
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id admpriv --query SecretBinary --output text)
        echo $SECRET | base64 --decode > admpriv.bin
      
    - name: Retrieve secret admpub
      id: retrieve-secret4
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id admpub --query SecretBinary --output text)
        echo $SECRET | base64 --decode > admpub.bin

    - name: Retrieve secret serverCertificatePrivateKey
      id: retrieve-secret5
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id serverCertificatePrivateKey --query SecretBinary --output text)
        echo $SECRET | base64 --decode > serverCertificatePrivateKey.bin

    - name: Retrieve secret config
      id: retrieve-secret6
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id config --query SecretString --output text)
        echo $SECRET > config.dct

    - name: Retrieve secret serverCertificate
      id: retrieve-secret7
      run: |
        SECRET=$(aws secretsmanager get-secret-value --secret-id serverCertificate --query SecretString --output text)
        echo $SECRET > serverCertificate.pem

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Deploy to Amazon ECS service
      run: aws ecs update-service --cluster HandleserverCluster --service Handleserver-Service --force-new-deployment

    - name: Get the URL of the deployed container
      run: echo ${{ steps.deploy.outputs.service-url }}
